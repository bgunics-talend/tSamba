<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable  
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
		java.util.Map
	" 
%>
	<%@ include file="./Log4jFileUtil.javajet"%> 
//tSambaList_Begin
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
    boolean incldSubdir = ElementParameterParser.getValue(node, "__INCLUDSUBDIR__").equals("true");
    boolean ifexclude = ElementParameterParser.getValue(node, "__IFEXCLUDE__").equals("true");
    String filelistType = ElementParameterParser.getValue(node, "__LIST_MODE__");
    boolean useGlob = ElementParameterParser.getValue(node, "__GLOBEXPRESSIONS__").equals("true");
    List<Map<String, String>> files = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FILES__");
    
    boolean toSlash = ("true").equals(ElementParameterParser.getValue(node, "__FORMAT_FILEPATH_TO_SLASH__"));
    boolean caseSensitive = ("YES").equals(ElementParameterParser.getValue(node, "__CASE_SENSITIVE__"));
    
    //Proxy parameters
    boolean useProxy = ElementParameterParser.getValue(node,"__USE_PROXY__").equals("true");
    String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
    String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
    String proxyUser = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");
//    String proxyPassword = ElementParameterParser.getValue(node,"__PROXY_PASSWORD__");
    boolean isEnableDebug = ("true").equals(ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__"));
    
    //Samba parameters
    String host = ElementParameterParser.getValue(node, "__HOST__");
	String user = ElementParameterParser.getValue(node, "__USERNAME__");
//	String pass = ElementParameterParser.getValue(node, "__PASSWORD__");
	String domain=ElementParameterParser.getValue(node, "__DOMAIN__");
    String remotedirectory = ElementParameterParser.getValue(node, "__REMOTEDIRECTORY__");

    List<Map<String, String>> jcifs_config = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__JCIFS_CONFIG__");
	final boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
  final boolean isLog4j2Enabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J2_ACTIVATE__"));//log4j2 enable
   
   log4jFileUtil.componentStartInfo(node); 


class codeGenerater{


    public void genFileNameOder(String _cid, String _suffix, boolean _isLog4jEnabled){
      if ("ASC".equals(_suffix)){
      %>  
        Comparator<jcifs.smb.SmbFile> fileNameASC_<%=_cid%> = new Comparator<jcifs.smb.SmbFile>() {
        
          public int compare(jcifs.smb.SmbFile o1, jcifs.smb.SmbFile o2) {
		  try{
            boolean bO1IsFile = o1.isFile();
            boolean bO2IsFile = o2.isFile();

            if (bO1IsFile && bO2IsFile) {
                return (o1.getName()).compareTo(o2.getName());
            } else if (bO1IsFile && (!bO2IsFile)) {
                return 1;
            } else if ((!bO1IsFile) && bO2IsFile) {
                return -1;
            } else if (!bO1IsFile && !bO2IsFile) {
                return (o1.getName()).compareTo(o2.getName());
            }
          } catch (jcifs.smb.SmbException e) {
            	if(<%=_isLog4jEnabled%>){
            		log.warn("<%=_cid%> - Exception when checking comparing o1 and o2: "+ e.getMessage());
				}
          }
          return 0;

          }
        };
      <%
      } else if ("DESC".equals(_suffix)){
      %>
        Comparator<jcifs.smb.SmbFile> fileNameDESC_<%=_cid%> = new Comparator<jcifs.smb.SmbFile>() {

          public int compare(jcifs.smb.SmbFile o1, jcifs.smb.SmbFile o2) {
		  try{
            boolean bO1IsFile = o1.isFile();
            boolean bO2IsFile = o2.isFile();
            
            if (bO1IsFile && bO2IsFile) {
                return (o2.getName()).compareTo(o1.getName());
            } else if (bO1IsFile && !bO2IsFile) {
                return -1;
            } else if (!bO1IsFile && bO2IsFile) {
                return 1;
            } else if (!bO1IsFile && !bO2IsFile) {
                return (o2.getName()).compareTo(o1.getName());
            }
          } catch (jcifs.smb.SmbException e) {
            	if(<%=_isLog4jEnabled%>){
            		log.warn("<%=_cid%> - Exception when checking comparing o1 and o2: "+ e.getMessage());
				}
          }
          return 0;

          }
        };
      <%
      }
    }
    
    public void genLastModifiedOder(String _cid, String _suffix, boolean _isLog4jEnabled){
      if ("ASC".equals(_suffix)){
      %>
        Comparator<jcifs.smb.SmbFile> lastModifiedASC_<%=_cid%> = new Comparator<jcifs.smb.SmbFile>() {
        
          public int compare(jcifs.smb.SmbFile o1, jcifs.smb.SmbFile o2) {
		  try{
            boolean bO1IsFile = o1.isFile();
            boolean bO2IsFile = o2.isFile();
            
            if ((bO1IsFile && bO2IsFile) || (!bO1IsFile && !bO2IsFile)) {
                if (o1.lastModified() == o2.lastModified()) {
                    return (o1.getName()).compareTo(o2.getName());
                } else if (o1.lastModified() > o2.lastModified()) {
                    return 1;
                } else {
                    return -1;
                }
            } else if (bO1IsFile && (!bO2IsFile)) {
                return 1;
            } else if ((!bO1IsFile) && bO2IsFile) {
                return -1;
            }
          } catch (jcifs.smb.SmbException e) {
            	if(<%=_isLog4jEnabled%>){
            		log.warn("<%=_cid%> - Exception when checking comparing o1 and o2: "+ e.getMessage());
				}
          }
          return 0;

          }
        };
      <%
      } else if ("DESC".equals(_suffix)){
      %>
        Comparator<jcifs.smb.SmbFile> lastModifiedDESC_<%=_cid%> = new Comparator<jcifs.smb.SmbFile>() {
        
          public int compare(jcifs.smb.SmbFile o1, jcifs.smb.SmbFile o2) {
		  try{
            boolean bO1IsFile = o1.isFile();
            boolean bO2IsFile = o2.isFile();
            
            if ((bO1IsFile && bO2IsFile) || (!bO1IsFile && !bO2IsFile)) {
                if (o1.lastModified() == o2.lastModified()) {
                    return (o2.getName()).compareTo(o1.getName());
                } else if (o1.lastModified() < o2.lastModified()) {
                    return 1;
                } else {
                    return -1;
                }
            } else if (bO1IsFile && (!bO2IsFile)) {
                return -1;
            } else if ((!bO1IsFile) && bO2IsFile) {
                return 1;            
            }
          } catch (jcifs.smb.SmbException e) {
            	if(<%=_isLog4jEnabled%>){
            		log.warn("<%=_cid%> - Exception when checking comparing o1 and o2: "+ e.getMessage());
				}
          }
          return 0;

          }
        };
      <%
      }
    }
    
    public void genFileSizeOder(String _cid, String _suffix, boolean _isLog4jEnabled){
      if ("ASC".equals(_suffix)){
      %>
        Comparator<jcifs.smb.SmbFile> filseSizeASC_<%=_cid%> = new Comparator<jcifs.smb.SmbFile>() {

          public int compare(jcifs.smb.SmbFile o1, jcifs.smb.SmbFile o2) {
		  try{
            boolean bO1IsFile = o1.isFile();
            boolean bO2IsFile = o2.isFile();
                      
            if (bO1IsFile && bO2IsFile) {
                long size_1 = o1.length();
                long size_2 = o2.length();                
       
                if (size_1 == size_2) {
                    return (o1.getName()).compareTo(o2.getName());
                } else if (size_1 > size_2) {
                    return 1;
                } else {
                    return -1;
                }                
            } else if (bO1IsFile && (!bO2IsFile)) {
                return 1;
            } else if ((!bO1IsFile) && bO2IsFile) {
                return -1;
            } else if ((!bO1IsFile) && (!bO2IsFile)){
                return (o1.getName()).compareTo(o2.getName());
            }
          } catch (jcifs.smb.SmbException e) {
            	if(<%=_isLog4jEnabled%>){
            		log.warn("<%=_cid%> - Exception when checking comparing o1 and o2: "+ e.getMessage());
				}
          }
          return 0;
          }
        };
      <%
      } else if ("DESC".equals(_suffix)){
      %>
        Comparator<jcifs.smb.SmbFile> filseSizeDESC_<%=_cid%> = new Comparator<jcifs.smb.SmbFile>() {
        
          public int compare(jcifs.smb.SmbFile o1, jcifs.smb.SmbFile o2) {
		  try{
            boolean bO1IsFile = o1.isFile();
            boolean bO2IsFile = o2.isFile();
            
            if (bO1IsFile && bO2IsFile) {
                
                long size_1 = o1.length();
                long size_2 = o2.length();
              
                if (size_1 == size_2) {
                    return (o2.getName()).compareTo(o1.getName());
                } else if (size_1 < size_2) {
                    return 1;
                } else {
                    return -1;
                }
                
            } else if (bO1IsFile && (!bO2IsFile)) {
                return -1;
            } else if ((!bO1IsFile) && bO2IsFile) {
                return 1;
            } else if ((!bO1IsFile) && (!bO2IsFile)){
                return (o2.getName()).compareTo(o1.getName());
            }
          } catch (jcifs.smb.SmbException e) {
            	if(<%=_isLog4jEnabled%>){
            		log.warn("<%=_cid%> - Exception when checking comparing o1 and o2: "+ e.getMessage());
				}
          }
          return 0;

          }
        };
      <%
      }
    }

    public void genDefaultOrder(String _cid, String _suffix, boolean _isLog4jEnabled){
    	%>
		Comparator<jcifs.smb.SmbFile> default<%=_suffix%>_<%=_cid%> = new Comparator<jcifs.smb.SmbFile>() {
        
          public int compare(jcifs.smb.SmbFile o1, jcifs.smb.SmbFile o2) {
		  try{
            boolean bO1IsFile = o1.isFile();
            boolean bO2IsFile = o2.isFile();
            
            if (bO1IsFile && bO2IsFile) {
               <%if ("ASC".equals(_suffix)){%>
                    return 1;
                <%} else {%>
                    return -1;
                <%}%>
            } else if (bO1IsFile && (!bO2IsFile)) {
                return 1;
            } else if ((!bO1IsFile) && bO2IsFile) {
                return -1;
            } else if ((!bO1IsFile) && (!bO2IsFile)){
                <%if ("ASC".equals(_suffix)){%>
                    return 1;
                <%} else {%>
                    return -1;
                <%}%>
            }
          } catch (jcifs.smb.SmbException e) {
            	if(<%=_isLog4jEnabled%>){
            		log.warn("<%=_cid%> - Exception when checking comparing o1 and o2: "+ e.getMessage());
				}
          }
          return 0;

          }
        };
    <%
    }

    public void addFiles(String cid,boolean useGlob,boolean caseSensitive,boolean ifexclude){
    %>
    	String fileName_<%=cid%> = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_<%=cid%> : patternList_<%=cid %>) {
          	if (fileNamePattern_<%=cid%>.matcher(fileName_<%=cid%>).matches()){
              <%if (ifexclude){%>
			 		boolean isExclude_<%=cid%> = false;
			        for(java.util.regex.Pattern pattern : excludefileNameEachPattern_<%=cid%>) {
			        	if(pattern.matcher(fileName_<%=cid%>).matches()) {
			        		isExclude_<%=cid%> = true;
			        		break;
			        	}
			        }
			        if(!isExclude_<%=cid%> && !filePath_<%=cid%>.contains(file.getPath()/*wasAbsolute*/)) {
			          list_<%=cid%>.add(file);
			          filePath_<%=cid%>.add(file.getPath()/*wasAbsolute*/);
			        }
              <%}else{%>
					if(!filePath_<%=cid%>.contains(file.getPath()/*wasAbsolute*/)) {
			          list_<%=cid%>.add(file);
			          filePath_<%=cid%>.add(file.getPath()/*wasAbsolute*/);
			        }
              <%}%>
			}
		}
    <%
    }
  }  
  %>   
//end of Codegenerator
<%
//Since we never put false to globalMap it can only return null or true, 
// if it returns null then we use the isEanbleDebug flag, and when  that's true 
//then all the other tSamba components will work in Debug mode.
%>
if ( (boolean)globalMap.getOrDefault("tSamba_isEnableDebug",<%=isEnableDebug%>) ) { 
    <%if(isLog4j2Enabled){%>
      org.apache.logging.log4j.core.config.Configurator.setLevel("jcifs", org.apache.logging.log4j.Level.DEBUG);
    <%} else if(isLog4jEnabled){%>
      org.apache.log4j.LogManager.getLogger("jcifs").setLevel(org.apache.log4j.Level.DEBUG);
    <%}%>
  globalMap.put("tSamba_isEnableDebug", true);
} else {
    <%if(isLog4j2Enabled){%>
      org.apache.logging.log4j.core.config.Configurator.setLevel("jcifs", org.apache.logging.log4j.Level.INFO);
    <%} else if(isLog4jEnabled){%>
      org.apache.log4j.LogManager.getLogger("jcifs").setLevel(org.apache.log4j.Level.INFO);
    <%}%>
}

    String remotedirectory_<%=cid%>="smb://"+<%=host%>+"/"+<%=remotedirectory%>;
    
    if (remotedirectory_<%=cid%>.endsWith("/")) {
    	remotedirectory_<%=cid%> = remotedirectory_<%=cid%>.substring(0,remotedirectory_<%=cid%>.length()-1);
    }

  final java.util.List<String> maskList_<%=cid %> = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_<%=cid %> = new java.util.ArrayList<java.util.regex.Pattern>();
  <%
  if (files.size() == 0){
    if (useGlob){
    %>
      maskList_<%=cid %>.add("*");
    <%
    } else{
    %>
      maskList_<%=cid %>.add(".*");
    <%
    }
  }
  
  for (int i = 0; i < files.size(); i++) {
    Map<String, String> line = files.get(i);
    %> 
    maskList_<%=cid %>.add(<%= line.get("FILEMASK") %>);
  <%}%>  
  for (final String filemask_<%=cid%> : maskList_<%=cid%>) {
	String filemask_compile_<%=cid%> = filemask_<%=cid%>;
	<%if (useGlob){%>
		filemask_compile_<%=cid%> = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_<%=cid%>.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	<%
	}
	if (caseSensitive){
	%>
		java.util.regex.Pattern fileNamePattern_<%=cid%> = java.util.regex.Pattern.compile(filemask_compile_<%=cid%>);
    <%
    }else{
    %>
		java.util.regex.Pattern fileNamePattern_<%=cid%> = java.util.regex.Pattern.compile(filemask_compile_<%=cid%>, java.util.regex.Pattern.CASE_INSENSITIVE);
	<%
 	}
	%>
	patternList_<%=cid %>.add(fileNamePattern_<%=cid%>);
  }
  int NB_FILE_<%=cid%> = 0;

  final boolean case_sensitive_<%=cid%> = <%=caseSensitive %>;
    <%
    if (ifexclude){
    %>   
      String excludefilemask_<%=cid%> = <%=ElementParameterParser.getValue(node, "__EXCLUDEFILEMASK__")%>;
	  final List<java.util.regex.Pattern> excludefileNameEachPattern_<%=cid%> = new java.util.ArrayList<java.util.regex.Pattern>();
	  if(excludefilemask_<%=cid%>!=null && !"".equals(excludefilemask_<%=cid%>)) {
	  	for(String excludefilemaskEach_<%=cid%> : excludefilemask_<%=cid%>.split(",")) {
	  	 <%if (useGlob){%>
	  		excludefilemaskEach_<%=cid%> = org.apache.oro.text.GlobCompiler.globToPerl5(excludefilemaskEach_<%=cid%>.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	  	 <%}
	  	 	if (!caseSensitive){
	  	 %>
				excludefileNameEachPattern_<%=cid%>.add(java.util.regex.Pattern.compile(excludefilemaskEach_<%=cid%>,java.util.regex.Pattern.CASE_INSENSITIVE));
		 <%
			} else {
		 %>
				excludefileNameEachPattern_<%=cid%>.add(java.util.regex.Pattern.compile(excludefilemaskEach_<%=cid%>));
		 <%
			}
		 %>	  	 		
	  	}
	  }
    <%}%>

<%
//The following part support the socks proxy for FTP and SFTP (Socks V4 or V5, they are all OK). 
//And it can not work with the FTP proxy directly, only support the socks proxy.
if(useProxy){
%>
{
		if(<%=isLog4jEnabled%>){
		log.debug("<%=cid%> - Enabling SOCKS proxy over "+<%=proxyHost %>+":"+<%=proxyPort %>+".");
		}
        java.util.Properties sysProps_<%=cid%> = System.getProperties();
        sysProps_<%=cid%>.put("socksProxySet",  "true");
        sysProps_<%=cid%>.put("socksProxyPort", <%=proxyPort %>);
        sysProps_<%=cid%>.put("socksProxyHost", <%=proxyHost %>);
        sysProps_<%=cid%>.put("java.net.socks.username", <%=proxyUser %>);
<%
            String passwordFieldName = "__PROXY_PASSWORD__";
%>
        <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
        sysProps_<%=cid%>.put("java.net.socks.password", decryptedPassword_<%=cid%>);
}
<%}%>

		java.util.Properties props_<%=cid%> = new java.util.Properties();
		//props_<%=cid%>.setProperty("jcifs.netbios.wins", <%=host%>);
//Configure based on the properties table
<%
		for (int i=0; i<jcifs_config.size(); i++) {
%>
    		props_<%=cid%>.setProperty(<%=jcifs_config.get(i).get("KEY")%>,<%=jcifs_config.get(i).get("VALUE")%>);
    		if(<%=isLog4jEnabled%>){
    			log.trace("<%=cid%> - Setting JCIFS property key: '"+<%=jcifs_config.get(i).get("KEY")%>+"' value: '" + <%=jcifs_config.get(i).get("VALUE")%> + "'.");
			}
<%
		}
%>
		jcifs.CIFSContext cifsContext_<%=cid%> = new jcifs.context.BaseContext(new jcifs.config.PropertyConfiguration(props_<%=cid%>));

<%
	    String passwordFieldName = "__PASSWORD__";
%>

    	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

		cifsContext_<%=cid%> = cifsContext_<%=cid%>.withCredentials(new jcifs.smb.NtlmPasswordAuthenticator(<%=domain%>, <%=user%>, decryptedPassword_<%=cid%>));


//    final java.util.List<java.io.File> list_<%=cid%> = new java.util.ArrayList<java.io.File>();
	final java.util.List<jcifs.smb.SmbFile> list_<%=cid%> = new java.util.ArrayList<jcifs.smb.SmbFile>();

    final java.util.Set<String> filePath_<%=cid%> = new java.util.HashSet<String>();
	
//	java.io.File file_<%=cid%> = new java.io.File(directory_<%=cid%>);
	jcifs.smb.SmbFile smbfile_<%=cid%> = new jcifs.smb.SmbFile(remotedirectory_<%=cid%>,cifsContext_<%=cid%>);
	if(<%=isLog4jEnabled%>){
		log.debug("<%=cid%> - Connecting to remote directory: " + remotedirectory_<%=cid%>);
	}
    smbfile_<%=cid%>.exists();
    
    <%
    codeGenerater cg = new codeGenerater();
    if (incldSubdir) {
    %>
		smbfile_<%=cid%>.listFiles(new jcifs.smb.SmbFilenameFilter () {
		  public boolean accept(jcifs.smb.SmbFile dir, String name) {
		  	try{
				jcifs.smb.SmbFile file = new jcifs.smb.SmbFile(dir +"/"+ name, dir.getContext());
				<%
				if (("FILES").equals(filelistType)) {
				%>
	                if (!file.isDirectory()) {
						<% cg.addFiles(cid,useGlob,caseSensitive,ifexclude); %>
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				<%
				} else if(("DIRECTORIES").equals(filelistType)) {
				%>
	                if (!file.isDirectory()) {
	                  return true;
	                } else {
	                	<% cg.addFiles(cid,useGlob,caseSensitive,ifexclude); %>
	                  	file.listFiles(this);
	                }
				<%
				} else if(("BOTH").equals(filelistType)) {
				%>
	                 <% cg.addFiles(cid,useGlob,caseSensitive,ifexclude); %>
		            if (file.isDirectory()) {
		              file.listFiles(this);
		            }
				<%
				}
				%>
				return false;
			} catch (jcifs.smb.SmbException | java.net.MalformedURLException e) {
         		log.warn("<%=cid%> - Filtering failed "+ e.getMessage() );
         		return false;
         	}
         }
		}
		);
    <%
    } else {
    %> 
		smbfile_<%=cid%>.listFiles(new jcifs.smb.SmbFilenameFilter () {
		  public boolean accept(jcifs.smb.SmbFile dir, String name) {
		  try {
				jcifs.smb.SmbFile file = new jcifs.smb.SmbFile(dir +"/"+ name, dir.getContext());
              <%
              if (("FILES").equals(filelistType)) {
              %>
                if (!file.isDirectory()) {
                	<% cg.addFiles(cid,useGlob,caseSensitive,ifexclude); %>
                }
            } catch (jcifs.smb.SmbException | java.net.MalformedURLException e) {
         		log.warn("<%=cid%> - Filtering failed "+ e.getMessage() );
         		return false; //?? or true?
         	}
              <%
              } else if (("DIRECTORIES").equals(filelistType)) {
              %>
                if (file.isDirectory()) {
                	<% cg.addFiles(cid,useGlob,caseSensitive,ifexclude); %>
                }
            } catch (jcifs.smb.SmbException | java.net.MalformedURLException e) {
         		log.warn("<%=cid%> - Filtering failed "+ e.getMessage() );
         		return false; //?? or true?
         	}
              <%
              } else if (("BOTH").equals(filelistType)) {
              %>
                	<% cg.addFiles(cid,useGlob,caseSensitive,ifexclude); %>
            } catch ( java.net.MalformedURLException e) {
         		log.warn("<%=cid%> - Filtering failed "+ e.getMessage() );
         		return false; //?? or true?
         	}
              <%
              }
              %>
              return true;
          }
      }
      );
    <%
    }
    %> 
    <%
    boolean bOrdByDefault = "true".equals(ElementParameterParser.getValue(node, "__ORDER_BY_NOTHING__"));
    boolean bOrdByFileName = "true".equals(ElementParameterParser.getValue(node, "__ORDER_BY_FILENAME__"));
    boolean bOrdByFileSize = "true".equals(ElementParameterParser.getValue(node, "__ORDER_BY_FILESIZE__"));
    boolean bOrdByModifiedTime = "true".equals(ElementParameterParser.getValue(node, "__ORDER_BY_MODIFIEDDATE__"));
    
    boolean bOrdASC = "true".equals(ElementParameterParser.getValue(node, "__ORDER_ACTION_ASC__"));
    //boolean bOrdDESC = "true".equals(ElementParameterParser.getValue(node, "__ORDER_ACTION_DESC__"));
    
    String suffix = bOrdASC ? "ASC" : "DESC";
    if(isLog4jEnabled) {%>
		log.info("<%=cid%> - Start to sort files before listing");
	<%}
    if (bOrdByDefault){
    %>
      //Default sort
    <%
    } else if (bOrdByFileName){
      cg.genFileNameOder(cid, suffix, isLog4jEnabled);
      %>
      java.util.Collections.sort(list_<%=cid%>, fileName<%=suffix%>_<%=cid%>);
    <%
    } else if (bOrdByFileSize){
      cg.genFileSizeOder(cid, suffix, isLog4jEnabled);
      %>
      java.util.Collections.sort(list_<%=cid %>, filseSize<%=suffix%>_<%=cid%>);
    <%
    } else if (bOrdByModifiedTime){
      cg.genLastModifiedOder(cid, suffix, isLog4jEnabled);
      %>
      java.util.Collections.sort(list_<%=cid %>, lastModified<%=suffix%>_<%=cid%>);
    <%
    }
    %>

    <%if(isLog4jEnabled) {%>
		log.info("<%=cid%> - Start to list files");
	<%}%>
    for (int i_<%=cid%> = 0; i_<%=cid%> < list_<%=cid%>.size(); i_<%=cid%>++){
      jcifs.smb.SmbFile files_<%=cid%> = list_<%=cid%>.get(i_<%=cid%>);
      String fileName_<%=cid%> = files_<%=cid%>.getName();
      
      String currentFileName_<%=cid%> = files_<%=cid%>.getName(); 
      String currentFilePath_<%=cid%> = files_<%=cid%>.getPath()/*wasAbsolute*/;
      String currentFileDirectory_<%=cid%> = files_<%=cid%>.getParent();
      String currentFileExtension_<%=cid%> = null;

//DEBUGHERE
      
      if (files_<%=cid%>.getName().contains(".") && files_<%=cid%>.isFile()){
        currentFileExtension_<%=cid%> = files_<%=cid%>.getName().substring(files_<%=cid%>.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_<%=cid%> = "";
      }
      <%if (toSlash){%>
        currentFilePath_<%=cid%> = currentFilePath_<%=cid%>.replaceAll("\\\\", "/");
        currentFileDirectory_<%=cid%> = currentFileDirectory_<%=cid%>.replaceAll("\\\\", "/");
      <%}%>
      
      NB_FILE_<%=cid%>++;
      globalMap.put("<%=cid%>_CURRENT_FILE", currentFileName_<%=cid%>);
      globalMap.put("<%=cid %>_CURRENT_FILEPATH", currentFilePath_<%=cid%>);
      globalMap.put("<%=cid %>_CURRENT_FILEDIRECTORY", currentFileDirectory_<%=cid%>);
      globalMap.put("<%=cid %>_CURRENT_FILEEXTENSION", currentFileExtension_<%=cid%>);
      globalMap.put("<%=cid%>_NB_FILE", NB_FILE_<%=cid%>);
      
      <%if(isLog4jEnabled) {%>
		log.info("<%=cid%> - Current file or directory path : " + currentFilePath_<%=cid%>);
	  <%}%>
